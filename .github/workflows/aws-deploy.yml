name: AWS Amplify Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test
        env:
          CI: true

  deploy-staging:
    name: Deploy to AWS Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          npm ci
          npm install -g @aws-amplify/cli

      - name: Deploy to AWS Amplify Staging
        run: |
          npx ampx pipeline-deploy \
            --branch staging \
            --app-id ${{ secrets.AMPLIFY_APP_ID }}
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_TEST }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET_TEST }}

  deploy-production:
    name: Deploy to AWS Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          npm ci
          npm install -g @aws-amplify/cli

      - name: Deploy to AWS Amplify Production
        id: deploy
        run: |
          npx ampx pipeline-deploy \
            --branch main \
            --app-id ${{ secrets.AMPLIFY_APP_ID }}
          
          # Get the app URL
          APP_URL=$(aws amplify get-app --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --query 'app.defaultDomain' --output text)
          echo "app_url=https://${APP_URL}" >> $GITHUB_OUTPUT
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_PROD }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET_PROD }}

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Check if the app is accessible
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.app_url }})
          if [ $STATUS -eq 200 ]; then
            echo "✅ Application is accessible"
          else
            echo "❌ Application returned status $STATUS"
            exit 1
          fi

      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws amplify get-app --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --query 'app.productionBranch.distributionId' --output text)
          
          if [ "$DISTRIBUTION_ID" != "None" ]; then
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
          fi