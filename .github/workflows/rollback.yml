name: Emergency Rollback Workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      rollback_target:
        description: 'Rollback to version/commit'
        required: true
        type: string
      reason:
        description: 'Rollback reason'
        required: true
        type: string
      skip_validation:
        description: 'Skip pre-rollback validation'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1

permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  rollback-validation:
    name: Pre-Rollback Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_validation }}
    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.environment == 'production' && secrets.AWS_PRODUCTION_ROLE_ARN || secrets.AWS_STAGING_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate rollback target
        id: validate
        run: |
          echo "üîç Validating rollback target: ${{ inputs.rollback_target }}"
          
          # Check if the target commit exists
          if ! git rev-parse "${{ inputs.rollback_target }}" >/dev/null 2>&1; then
            echo "‚ùå Rollback target commit not found"
            echo "status=FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate that target is older than current deployment
          CURRENT_COMMIT=$(aws ssm get-parameter --name "/ecosystemaws/${{ inputs.environment }}/current-commit" --query 'Parameter.Value' --output text 2>/dev/null || echo "unknown")
          echo "Current deployment: $CURRENT_COMMIT"
          echo "Rollback target: ${{ inputs.rollback_target }}"
          
          # Check infrastructure state
          aws cloudformation describe-stacks --stack-name ecosystemaws-${{ inputs.environment }} --query 'Stacks[0].StackStatus' --output text
          
          echo "‚úÖ Rollback target validation passed"
          echo "status=PASSED" >> $GITHUB_OUTPUT

      - name: Create rollback plan
        run: |
          cat > rollback-plan.json << EOF
          {
            "environment": "${{ inputs.environment }}",
            "rollback_target": "${{ inputs.rollback_target }}",
            "reason": "${{ inputs.reason }}",
            "initiated_by": "${{ github.actor }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "current_deployment": "$(aws ssm get-parameter --name "/ecosystemaws/${{ inputs.environment }}/current-commit" --query 'Parameter.Value' --output text 2>/dev/null || echo 'unknown')"
          }
          EOF

      - name: Upload rollback plan
        uses: actions/upload-artifact@v4
        with:
          name: rollback-plan
          path: rollback-plan.json

  execute-rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [rollback-validation]
    if: ${{ always() && (needs.rollback-validation.outputs.validation-status == 'PASSED' || inputs.skip_validation) }}
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout rollback target
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.rollback_target }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.environment == 'production' && secrets.AWS_PRODUCTION_ROLE_ARN || secrets.AWS_STAGING_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download rollback plan
        uses: actions/download-artifact@v4
        if: ${{ !inputs.skip_validation }}
        with:
          name: rollback-plan

      - name: Create deployment backup
        run: |
          echo "üì∏ Creating pre-rollback backup..."
          BACKUP_ID="rollback-backup-$(date +%Y%m%d-%H%M%S)"
          
          # Backup current configuration
          aws ssm put-parameter \
            --name "/ecosystemaws/${{ inputs.environment }}/backup/$BACKUP_ID/commit" \
            --value "$(aws ssm get-parameter --name "/ecosystemaws/${{ inputs.environment }}/current-commit" --query 'Parameter.Value' --output text 2>/dev/null || echo 'unknown')" \
            --type String \
            --overwrite
          
          echo "backup-id=$BACKUP_ID" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: Build rollback version
        run: |
          echo "üî® Building rollback version..."
          npm run build

      - name: Build Amplify backend
        run: |
          echo "‚òÅÔ∏è Building Amplify backend for rollback..."
          npx ampx build

      - name: Pre-rollback health check
        run: |
          echo "üè• Pre-rollback health check..."
          ENDPOINT="${{ inputs.environment == 'production' && 'https://api.ecosystemaws.com' || 'https://staging-api.ecosystemaws.com' }}"
          curl -f "$ENDPOINT/health" || echo "Current deployment unhealthy - proceeding with rollback"

      - name: Execute blue-green rollback
        run: |
          echo "üîÑ Executing blue-green rollback..."
          
          if [ "${{ inputs.environment }}" = "production" ]; then
            # Deploy rollback version to green environment
            echo "üü¢ Deploying rollback version to GREEN environment..."
            npx ampx pipeline-deploy --branch production-rollback --app-id ${{ secrets.AMPLIFY_PRODUCTION_APP_ID }}
            
            # Wait for deployment
            sleep 90
            
            # Health check on green environment
            curl -f "https://green-api.ecosystemaws.com/health" || exit 1
            
            # Switch traffic to green (rollback version)
            echo "üîÑ Switching traffic to rollback version..."
            aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} \
              --change-batch file://rollback-traffic-switch.json
              
          else
            # Direct rollback for staging
            echo "üîÑ Rolling back staging environment..."
            npx ampx pipeline-deploy --branch staging-rollback --app-id ${{ secrets.AMPLIFY_STAGING_APP_ID }}
          fi

      - name: Post-rollback validation
        run: |
          echo "‚úÖ Post-rollback validation..."
          ENDPOINT="${{ inputs.environment == 'production' && 'https://api.ecosystemaws.com' || 'https://staging-api.ecosystemaws.com' }}"
          
          # Wait for DNS propagation and deployment stabilization
          sleep 60
          
          # Health checks
          for i in {1..10}; do
            echo "Health check #$i"
            if curl -f "$ENDPOINT/health"; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚ö†Ô∏è Health check failed, retrying in 30 seconds..."
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Health checks failed after rollback"
              exit 1
            fi
          done

      - name: Run smoke tests on rolled back version
        run: |
          echo "üí® Running smoke tests on rolled back version..."
          npm run test:smoke
        env:
          TEST_ENVIRONMENT: ${{ inputs.environment }}
          TEST_BASE_URL: ${{ inputs.environment == 'production' && 'https://ecosystemaws.com' || 'https://staging.ecosystemaws.com' }}

      - name: Update deployment tracking
        run: |
          echo "üìù Updating deployment tracking..."
          
          # Update current deployment reference
          aws ssm put-parameter \
            --name "/ecosystemaws/${{ inputs.environment }}/current-commit" \
            --value "${{ inputs.rollback_target }}" \
            --type String \
            --overwrite
          
          # Log rollback event
          aws ssm put-parameter \
            --name "/ecosystemaws/${{ inputs.environment }}/rollback/$(date +%Y%m%d-%H%M%S)" \
            --value "{\"target\":\"${{ inputs.rollback_target }}\",\"reason\":\"${{ inputs.reason }}\",\"by\":\"${{ github.actor }}\",\"backup\":\"${{ env.backup-id }}\"}" \
            --type String

  rollback-monitoring:
    name: Post-Rollback Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [execute-rollback]
    if: ${{ success() }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.environment == 'production' && secrets.AWS_PRODUCTION_ROLE_ARN || secrets.AWS_STAGING_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Monitor key metrics
        run: |
          echo "üìä Monitoring key metrics post-rollback..."
          
          ENDPOINT="${{ inputs.environment == 'production' && 'https://api.ecosystemaws.com' || 'https://staging-api.ecosystemaws.com' }}"
          
          for i in {1..10}; do
            echo "Monitoring check #$i (waiting 1 minute between checks)"
            
            # Response time check
            RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$ENDPOINT/health")
            echo "Response time: ${RESPONSE_TIME}s"
            
            # Error rate check via CloudWatch
            ERROR_COUNT=$(aws cloudwatch get-metric-statistics \
              --namespace "AWS/Lambda" \
              --metric-name "Errors" \
              --start-time "$(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S)" \
              --end-time "$(date -u +%Y-%m-%dT%H:%M:%S)" \
              --period 300 \
              --statistics Sum \
              --query 'Datapoints[0].Sum' \
              --output text 2>/dev/null || echo "0")
            
            echo "Error count (last 5 min): $ERROR_COUNT"
            
            if [ "$ERROR_COUNT" -gt 10 ]; then
              echo "‚ö†Ô∏è High error count detected"
            fi
            
            sleep 60
          done

      - name: Performance validation
        run: |
          echo "‚ö° Validating performance metrics..."
          
          # Check average response time over last 15 minutes
          AVG_RESPONSE_TIME=$(aws cloudwatch get-metric-statistics \
            --namespace "AWS/Lambda" \
            --metric-name "Duration" \
            --start-time "$(date -u -d '15 minutes ago' +%Y-%m-%dT%H:%M:%S)" \
            --end-time "$(date -u +%Y-%m-%dT%H:%M:%S)" \
            --period 900 \
            --statistics Average \
            --query 'Datapoints[0].Average' \
            --output text 2>/dev/null || echo "0")
          
          echo "Average response time (15 min): ${AVG_RESPONSE_TIME}ms"
          
          if (( $(echo "$AVG_RESPONSE_TIME > 1000" | bc -l) )); then
            echo "‚ö†Ô∏è Response time above normal threshold"
          else
            echo "‚úÖ Response time within normal range"
          fi

  rollback-report:
    name: Rollback Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [rollback-validation, execute-rollback, rollback-monitoring]
    if: always()
    
    steps:
      - name: Generate rollback report
        run: |
          cat > rollback-report.md << EOF
          # üö® Emergency Rollback Report
          
          ## Rollback Information
          - **Environment**: ${{ inputs.environment }}
          - **Rollback Target**: ${{ inputs.rollback_target }}
          - **Reason**: ${{ inputs.reason }}
          - **Initiated By**: ${{ github.actor }}
          - **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          ## Execution Status
          - **Validation**: ${{ needs.rollback-validation.result || 'SKIPPED' }}
          - **Rollback Execution**: ${{ needs.execute-rollback.result || 'FAILED' }}
          - **Post-Rollback Monitoring**: ${{ needs.rollback-monitoring.result || 'FAILED' }}
          
          ## Impact Assessment
          - **Service Availability**: ${{ needs.execute-rollback.result == 'success' && '‚úÖ RESTORED' || '‚ùå IMPACTED' }}
          - **Data Integrity**: ‚úÖ MAINTAINED (No data operations in rollback)
          - **User Impact**: ${{ inputs.environment == 'production' && 'HIGH' || 'LOW' }}
          
          ## Next Steps
          ${{ needs.execute-rollback.result == 'success' && '- Monitor system stability for 2 hours' || '- Investigate rollback failure' }}
          ${{ needs.execute-rollback.result == 'success' && '- Identify and fix root cause of original issue' || '- Consider manual intervention' }}
          ${{ needs.execute-rollback.result == 'success' && '- Plan forward deployment of fix' || '- Escalate to engineering team' }}
          
          ## Backup Information
          - **Pre-Rollback Backup**: Available for recovery if needed
          - **Rollback Window**: Emergency rollback completed
          
          ---
          *ü§ñ Generated by AWS Emergency Rollback System*
          EOF

      - name: Upload rollback report
        uses: actions/upload-artifact@v4
        with:
          name: rollback-report
          path: rollback-report.md

      - name: Notify stakeholders
        run: |
          STATUS="${{ needs.execute-rollback.result }}"
          if [ "$STATUS" = "success" ]; then
            EMOJI="‚úÖ"
            COLOR="good"
            MESSAGE="Emergency rollback completed successfully"
          else
            EMOJI="‚ùå"
            COLOR="danger"
            MESSAGE="Emergency rollback FAILED - immediate attention required"
          fi
          
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data "{
              \"text\": \"$EMOJI $MESSAGE\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"Rollback Details\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"${{ inputs.environment }}\", \"short\": true},
                  {\"title\": \"Target\", \"value\": \"${{ inputs.rollback_target }}\", \"short\": true},
                  {\"title\": \"Reason\", \"value\": \"${{ inputs.reason }}\", \"short\": false},
                  {\"title\": \"Initiated By\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true}
                ]
              }]
            }"

      - name: Create incident ticket
        if: ${{ needs.execute-rollback.result == 'success' }}
        run: |
          echo "üé´ Creating incident ticket for root cause analysis..."
          # In a real environment, this would integrate with your ticketing system
          echo "Incident ticket would be created with details:"
          echo "- Title: Production Rollback - ${{ inputs.reason }}"
          echo "- Priority: P1"
          echo "- Environment: ${{ inputs.environment }}"
          echo "- Rollback Target: ${{ inputs.rollback_target }}"