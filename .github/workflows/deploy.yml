name: Deploy to AWS Amplify

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip running tests before deployment'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      tests_passed: ${{ steps.test_results.outputs.passed }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:coverage
        env:
          CI: true

      - name: Check test results
        id: test_results
        run: |
          if [ $? -eq 0 ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: |
      always() && (
        github.ref == 'refs/heads/develop' ||
        (github.event.inputs.environment == 'staging' && github.event_name == 'workflow_dispatch')
      ) && (
        needs.pre-deployment-checks.result == 'success' ||
        needs.pre-deployment-checks.result == 'skipped' ||
        github.event.inputs.skip_tests == 'true'
      )
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.app_url }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_TEST_PUBLIC_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Amplify Staging
        id: deploy
        run: |
          npx ampx pipeline-deploy \
            --branch develop \
            --app-id ${{ secrets.AMPLIFY_APP_ID }}
          
          # Get the app URL (you might need to adjust this based on your setup)
          echo "app_url=https://develop.${{ secrets.AMPLIFY_APP_ID }}.amplifyapp.com" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Run smoke tests against staging
        run: |
          # Wait for deployment to be available
          npx wait-on ${{ steps.deploy.outputs.app_url }} --timeout 300000 || echo "Staging URL not responding, continuing..."
          
          # Run basic smoke tests
          curl -f ${{ steps.deploy.outputs.app_url }} || exit 1
          curl -f ${{ steps.deploy.outputs.app_url }}/api/health || echo "Health check endpoint not available"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Staging deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.app_url }}"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-staging]
    if: |
      always() && (
        github.ref == 'refs/heads/main' ||
        (github.event.inputs.environment == 'production' && github.event_name == 'workflow_dispatch')
      ) && (
        needs.pre-deployment-checks.result == 'success' ||
        needs.pre-deployment-checks.result == 'skipped' ||
        github.event.inputs.skip_tests == 'true'
      ) && (
        needs.deploy-staging.result == 'success' ||
        github.event_name == 'workflow_dispatch'
      )
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_LIVE_PUBLIC_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create deployment backup
        run: |
          echo "Creating backup before production deployment..."
          # You can add backup logic here if needed

      - name: Deploy to Amplify Production
        id: deploy
        run: |
          npx ampx pipeline-deploy \
            --branch main \
            --app-id ${{ secrets.AMPLIFY_APP_ID }}
          
          # Get the production app URL
          echo "app_url=https://main.${{ secrets.AMPLIFY_APP_ID }}.amplifyapp.com" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Run production smoke tests
        run: |
          # Wait for deployment to be available
          npx wait-on ${{ steps.deploy.outputs.app_url }} --timeout 300000 || echo "Production URL not responding immediately"
          
          # Run comprehensive smoke tests
          curl -f ${{ steps.deploy.outputs.app_url }} || exit 1
          curl -f ${{ steps.deploy.outputs.app_url }}/api/health || echo "Health check endpoint not available"
          
          # Test critical user flows
          echo "Testing critical paths..."

      - name: Send deployment notifications
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful!"
            echo "URL: ${{ steps.deploy.outputs.app_url }}"
            echo "Commit: ${{ github.sha }}"
          else
            echo "❌ Production deployment failed!"
            echo "Commit: ${{ github.sha }}"
            # Add Slack/Discord/email notifications here
          fi

      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Production deployment successful! View at: ${{ steps.deploy.outputs.app_url }}'
            })

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.ref == 'refs/heads/main'
    environment:
      name: production-rollback
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous commit
        id: previous_commit
        run: |
          PREVIOUS_COMMIT=$(git log --oneline -n 2 | tail -1 | cut -d' ' -f1)
          echo "commit=$PREVIOUS_COMMIT" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Rollback deployment
        run: |
          echo "Rolling back to commit: ${{ steps.previous_commit.outputs.commit }}"
          # Add rollback logic here - this depends on your Amplify setup
          # You might need to redeploy the previous commit or use Amplify's rollback features
          
      - name: Notify rollback
        run: |
          echo "🔄 Automatic rollback initiated due to deployment failure"
          echo "Rolled back to: ${{ steps.previous_commit.outputs.commit }}"